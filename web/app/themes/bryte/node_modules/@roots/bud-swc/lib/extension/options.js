import { __decorate } from "tslib";
import { DynamicOption, Extension, } from '@roots/bud-framework/extension';
import { bind, options } from '@roots/bud-framework/extension/decorators';
import isFunction from '@roots/bud-support/isFunction';
let BudSWCApi = class BudSWCApi extends Extension {
    get baseUrl() {
        return this.options.jsc.baseUrl;
    }
    get experimental() {
        return this.options.jsc.experimental;
    }
    get externalHelpers() {
        return this.options.jsc.externalHelpers;
    }
    getBaseUrl() {
        return this.options.jsc.baseUrl;
    }
    getExperimental() {
        return this.options.jsc.experimental;
    }
    getExternalHelpers() {
        return this.options.jsc.externalHelpers;
    }
    getKeepClassNames() {
        return this.options.jsc.keepClassNames;
    }
    getLoose() {
        return this.options.jsc.loose;
    }
    getMinify() {
        return this.options.jsc.minify;
    }
    getParser() {
        return this.options.jsc.parser;
    }
    getPreserveAllComments() {
        return this.options.jsc.preserveAllComments;
    }
    getTarget() {
        return this.options.jsc.target;
    }
    getTransform() {
        return this.options.jsc.transform;
    }
    get keepClassNames() {
        return this.options.jsc.keepClassNames;
    }
    get loose() {
        return this.options.jsc.loose;
    }
    get minify() {
        return this.options.jsc.minify;
    }
    get parser() {
        return this.options.jsc.parser;
    }
    get preserveAllComments() {
        return this.options.jsc.preserveAllComments;
    }
    setBaseUrl(baseUrl) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            baseUrl: isFunction(baseUrl) ? baseUrl(jsc.baseUrl) : baseUrl,
        }));
        return this;
    }
    setExperimental(experimental) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            experimental: isFunction(experimental)
                ? experimental(jsc.experimental)
                : experimental,
        }));
        return this;
    }
    /**
     * Set SWC plugins
     */
    setExperimentalPlugins(input) {
        const value = typeof input === `function`
            ? input(this.options?.jsc?.experimental?.plugins ?? [])
            : input;
        this.setJsc(jsc => ({
            ...(jsc ?? {}),
            experimental: {
                ...(jsc?.experimental ?? {}),
                plugins: [...(jsc?.experimental?.plugins ?? []), ...(value ?? [])],
            },
        }));
        return this;
    }
    setExternalHelpers(externalHelpers) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            externalHelpers: isFunction(externalHelpers)
                ? externalHelpers(jsc.externalHelpers)
                : externalHelpers,
        }));
        return this;
    }
    setKeepClassNames(keepClassNames) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            keepClassNames: isFunction(keepClassNames)
                ? keepClassNames(jsc.keepClassNames)
                : keepClassNames,
        }));
        return this;
    }
    setLoose(loose) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            loose: isFunction(loose) ? loose(jsc.loose) : loose,
        }));
        return this;
    }
    setMinify(minify) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            minify: isFunction(minify) ? minify(jsc.minify) : minify,
        }));
        return this;
    }
    setParser(parser) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            parser: isFunction(parser) ? parser(jsc.parser) : parser,
        }));
        return this;
    }
    setPlugins(input) {
        this.setExperimentalPlugins(input);
        return this;
    }
    setPreserveAllComments(preserveAllComments) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            preserveAllComments: isFunction(preserveAllComments)
                ? preserveAllComments(jsc.preserveAllComments)
                : preserveAllComments,
        }));
        return this;
    }
    setTarget(target) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            target: isFunction(target) ? target(jsc.target) : target,
        }));
        return this;
    }
    setTransform(transform) {
        this.setJsc((jsc = {}) => ({
            ...jsc,
            transform: isFunction(transform)
                ? transform(jsc.transform)
                : transform,
        }));
        return this;
    }
    get target() {
        return this.options.jsc.target;
    }
    get transform() {
        return this.options.jsc.transform;
    }
};
__decorate([
    bind
], BudSWCApi.prototype, "getBaseUrl", null);
__decorate([
    bind
], BudSWCApi.prototype, "getExperimental", null);
__decorate([
    bind
], BudSWCApi.prototype, "getExternalHelpers", null);
__decorate([
    bind
], BudSWCApi.prototype, "getKeepClassNames", null);
__decorate([
    bind
], BudSWCApi.prototype, "getLoose", null);
__decorate([
    bind
], BudSWCApi.prototype, "getMinify", null);
__decorate([
    bind
], BudSWCApi.prototype, "getParser", null);
__decorate([
    bind
], BudSWCApi.prototype, "getPreserveAllComments", null);
__decorate([
    bind
], BudSWCApi.prototype, "getTarget", null);
__decorate([
    bind
], BudSWCApi.prototype, "getTransform", null);
__decorate([
    bind
], BudSWCApi.prototype, "setBaseUrl", null);
__decorate([
    bind
], BudSWCApi.prototype, "setExperimental", null);
__decorate([
    bind
], BudSWCApi.prototype, "setExperimentalPlugins", null);
__decorate([
    bind
], BudSWCApi.prototype, "setExternalHelpers", null);
__decorate([
    bind
], BudSWCApi.prototype, "setKeepClassNames", null);
__decorate([
    bind
], BudSWCApi.prototype, "setLoose", null);
__decorate([
    bind
], BudSWCApi.prototype, "setMinify", null);
__decorate([
    bind
], BudSWCApi.prototype, "setParser", null);
__decorate([
    bind
], BudSWCApi.prototype, "setPlugins", null);
__decorate([
    bind
], BudSWCApi.prototype, "setPreserveAllComments", null);
__decorate([
    bind
], BudSWCApi.prototype, "setTarget", null);
__decorate([
    bind
], BudSWCApi.prototype, "setTransform", null);
BudSWCApi = __decorate([
    options({
        env: undefined,
        exclude: undefined,
        inlineSourcesContent: undefined,
        jsc: DynamicOption.make(bud => ({
            experimental: {
                cacheRoot: bud.path(bud.cache.cacheDirectory, `swc`),
                plugins: [],
            },
            parser: {
                dynamicImport: true,
                syntax: `ecmascript`,
            },
            target: `es2022`,
        })),
        module: {
            type: `es6`,
        },
        sourceMaps: DynamicOption.make(({ hooks }) => {
            const devtool = hooks.filter(`build.devtool`, false);
            if (devtool === false)
                return false;
            if (devtool.includes(`inline`))
                return `inline`;
            return true;
        }),
        test: undefined,
    })
], BudSWCApi);
export { BudSWCApi };
