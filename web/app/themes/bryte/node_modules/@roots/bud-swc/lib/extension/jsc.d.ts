import type { Options } from '@swc/core';
import { Extension, type OptionAccessor, type OptionGetter, type OptionSetter, type StrictPublicExtensionApi } from '@roots/bud-framework/extension';
/**
 * Options related to SWC compiler
 *
 * @remarks
 * There are two additional properties: `typescript` and `ecmascript`.
 * These are used to override the base options for each language.
 * This is useful for using different options for
 * different file types but still using the same general config.
 */
type JSCOptions = Options[`jsc`] & {
    baseUrl: Options[`jsc`][`baseUrl`];
    experimental: Options[`jsc`][`experimental`];
    /**
     * Use `@swc/helpers` instead of inline helpers.
     */
    externalHelpers: Options[`jsc`][`externalHelpers`];
    /**
     * Keep class names.
     */
    keepClassNames: Options[`jsc`][`keepClassNames`];
    loose: boolean;
    minify: Options[`jsc`][`minify`];
    parser: Options[`jsc`][`parser`];
    paths: Options[`jsc`][`paths`];
    preserveAllComments: Options[`jsc`][`preserveAllComments`];
    /**
     * Defaults to `es3` (which enabled **all** pass).
     */
    target: Options[`jsc`][`target`];
    transform: Options[`jsc`][`transform`];
};
type BudJSCPublicInterface = StrictPublicExtensionApi<BudJSCApi, JSCOptions>;
declare class BudJSCApi extends Extension<JSCOptions> {
    baseUrl: OptionAccessor<JSCOptions, `baseUrl`>;
    experimental: OptionAccessor<JSCOptions, `experimental`>;
    externalHelpers: OptionAccessor<JSCOptions, `externalHelpers`>;
    getBaseUrl: OptionGetter<JSCOptions, `baseUrl`>;
    getExperimental: OptionGetter<JSCOptions, `experimental`>;
    getExternalHelpers: OptionGetter<JSCOptions, `externalHelpers`>;
    getKeepClassNames: OptionGetter<JSCOptions, `keepClassNames`>;
    getLoose: OptionGetter<JSCOptions, `loose`>;
    getMinify: OptionGetter<JSCOptions, `minify`>;
    getParser: OptionGetter<JSCOptions, `parser`>;
    getPaths: OptionGetter<JSCOptions, `paths`>;
    getPreserveAllComments: OptionGetter<JSCOptions, `preserveAllComments`>;
    getTarget: OptionGetter<JSCOptions, `target`>;
    getTransform: OptionGetter<JSCOptions, `transform`>;
    keepClassNames: OptionAccessor<JSCOptions, `keepClassNames`>;
    loose: OptionAccessor<JSCOptions, `loose`>;
    minify: OptionAccessor<JSCOptions, `minify`>;
    parser: OptionAccessor<JSCOptions, `parser`>;
    paths: OptionAccessor<JSCOptions, `paths`>;
    preserveAllComments: OptionAccessor<JSCOptions, `preserveAllComments`>;
    setBaseUrl: OptionSetter<BudJSCApi, JSCOptions, `baseUrl`>;
    setExperimental: OptionSetter<BudJSCApi, JSCOptions, `experimental`>;
    setExternalHelpers: OptionSetter<BudJSCApi, JSCOptions, `externalHelpers`>;
    setKeepClassNames: OptionSetter<BudJSCApi, JSCOptions, `keepClassNames`>;
    setLoose: OptionSetter<BudJSCApi, JSCOptions, `loose`>;
    setMinify: OptionSetter<BudJSCApi, JSCOptions, `minify`>;
    setParser: OptionSetter<BudJSCApi, JSCOptions, `parser`>;
    setPaths: OptionSetter<BudJSCApi, JSCOptions, `paths`>;
    setPreserveAllComments: OptionSetter<BudJSCApi, JSCOptions, `preserveAllComments`>;
    setTarget: OptionSetter<BudJSCApi, JSCOptions, `target`>;
    setTransform: OptionSetter<BudJSCApi, JSCOptions, `transform`>;
    target: OptionAccessor<JSCOptions, `target`>;
    transform: OptionAccessor<JSCOptions, `transform`>;
    setPlugins(plugins: ((plugins?: JSCOptions[`experimental`][`plugins`]) => JSCOptions[`experimental`][`plugins`]) | JSCOptions[`experimental`][`plugins`]): void;
}
export { BudJSCApi, type BudJSCPublicInterface, type JSCOptions };
