import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, expose, label, } from '@roots/bud-framework/extension/decorators';
import merge from '@roots/bud-support/merge';
/**
 * React configuration
 */
let BudReact = class BudReact extends Extension {
    /**
     * Accessor for `@roots/bud-react/react-refresh`
     *
     * @readonly
     */
    get refresh() {
        return this.app.extensions.get(`@roots/bud-react/react-refresh`);
    }
    /**
     * {@link Extension.configAfter}
     */
    async boot(bud) {
        bud.provide(await this.resolve(`react`, import.meta.url), [`React`]);
        await bud.extensions.add(`@roots/bud-react/react-refresh`);
        if (bud.swc) {
            bud.swc.setJsc(merge(bud.swc.jsc, { transform: { react: { runtime: `automatic` } } }));
            bud.swc.setTransform((transform = {}) => ({
                react: { runtime: `automatic`, ...(transform.react ?? {}) },
                ...transform,
            }));
        }
        if (bud.babel) {
            const babelPluginUrl = await this.resolve(`@babel/preset-react`, import.meta.url).catch(bud.catch);
            this.app.babel.setPreset(`@babel/preset-react`, babelPluginUrl);
        }
    }
};
__decorate([
    bind
], BudReact.prototype, "boot", null);
BudReact = __decorate([
    label(`@roots/bud-react`),
    expose(`react`)
], BudReact);
export default BudReact;
