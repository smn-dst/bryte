import type { ReactRefreshPluginOptions } from '@pmmmwh/react-refresh-webpack-plugin/types/lib/types.js';
import type { Bud } from '@roots/bud-framework';
import RefreshPlugin from '@pmmmwh/react-refresh-webpack-plugin';
import { Extension, type Option } from '@roots/bud-framework/extension';
interface Options extends ReactRefreshPluginOptions {
    compilerExtension: Extension;
}
/**
 * @pmmmwh/react-refresh-webpack-plugin configuration
 */
export default class BudReactRefresh extends Extension<Options, RefreshPlugin> {
    /**
     * The extension handling react-refresh compiler transforms
     *
     * @remarks
     * By default the extension will be set automatically based on the
     * presence of `@roots/bud-swc`, `@roots/bud-typescript` or `@roots/bud-babel`
     * (listed in order of preference).
     */
    compilerExtension: Option<BudReactRefresh, Options, `compilerExtension`>[`value`];
    /**
     * Get the extension handling react-refresh compiler transforms
     *
     * @remarks
     * By default the extension will be set automatically based on the
     * presence of `@roots/bud-swc`, `@roots/bud-typescript` or `@roots/bud-babel`
     * (listed in order of preference).
     */
    getCompilerExtension: Option<BudReactRefresh, Options, `compilerExtension`>[`get`];
    /**
     * Explicitly set extension to handle react-refresh compiler transforms
     *
     * @remarks
     * By default the extension will be set automatically based on the
     * presence of `@roots/bud-swc`, `@roots/bud-typescript` or `@roots/bud-babel`
     * (listed in order of preference).
     */
    setCompilerExtension: Option<BudReactRefresh, Options, `compilerExtension`>[`set`];
    /**
     * {@link Extension.configAfter}
     */
    configAfter(bud: Bud): Promise<void>;
    /**
     * {@link Extension.make}
     */
    make(bud: Bud, options: Options): Promise<RefreshPlugin>;
    /**
     * Configure {@link RefreshPlugin}
     *
     * @example
     * Add react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh(true)
     * ```
     *
     * @example
     * Remove react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh(false)
     * ```
     *
     * @example
     * Configure react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh({
     *   overlay: true,
     * })
     * ```
     *
     * @remarks
     * Configuration takes place during the `config.after` event
     */
    configure(userOptions?: false | Options): this;
    /**
     * Callback handling {@link RefreshPlugin} configuration
     */
    protected makeReactRefreshCallback(userOptions?: false | Options): (bud: Bud) => Promise<unknown>;
}
export {};
