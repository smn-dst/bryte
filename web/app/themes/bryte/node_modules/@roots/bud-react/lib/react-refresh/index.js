import { __decorate } from "tslib";
import RefreshPlugin from '@pmmmwh/react-refresh-webpack-plugin';
import { DynamicOption, Extension, } from '@roots/bud-framework/extension';
import { bind, development, label, options, } from '@roots/bud-framework/extension/decorators';
import isBoolean from '@roots/bud-support/isBoolean';
import isUndefined from '@roots/bud-support/isUndefined';
import omit from '@roots/bud-support/omit';
/**
 * @pmmmwh/react-refresh-webpack-plugin configuration
 */
let BudReactRefresh = class BudReactRefresh extends Extension {
    /**
     * {@link Extension.configAfter}
     */
    async configAfter(bud) {
        if (!this.isEnabled())
            return;
        if (bud.context.mode !== `development`)
            return;
        if (bud.context.hot === false)
            return;
        if (!this.compilerExtension) {
            const signifier = bud.swc
                ? `@roots/bud-react/swc-refresh`
                : bud.typescript && bud.typescript.babel === false
                    ? `@roots/bud-react/typescript-refresh`
                    : bud.babel || bud.typescript?.babel === true
                        ? `@roots/bud-react/babel-refresh`
                        : false;
            if (signifier === false) {
                return;
            }
            await bud.extensions.add(signifier);
            this.setCompilerExtension(bud.extensions.get(signifier));
            this.logger.info(`Registered compiler extension for BudReactRefresh`, this.compilerExtension.label);
        }
    }
    /**
     * {@link Extension.make}
     */
    async make(bud, options) {
        return new RefreshPlugin(omit(this.options, [`compilerExtension`]));
    }
    /**
     * Configure {@link RefreshPlugin}
     *
     * @example
     * Add react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh(true)
     * ```
     *
     * @example
     * Remove react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh(false)
     * ```
     *
     * @example
     * Configure react-refresh-webpack-plugin
     *
     * ```ts
     * bud.react.refresh({
     *   overlay: true,
     * })
     * ```
     *
     * @remarks
     * Configuration takes place during the `config.after` event
     */
    configure(userOptions) {
        this.app.hooks.action(`config.after`, this.makeReactRefreshCallback(userOptions));
        return this;
    }
    /**
     * Callback handling {@link RefreshPlugin} configuration
     */
    makeReactRefreshCallback(userOptions) {
        return async () => {
            if (!this.app.isDevelopment)
                return this;
            if (!isUndefined(userOptions) && !isBoolean(userOptions))
                this.setOptions(userOptions);
            userOptions === false ? this.enable(false) : this.enable();
            return this;
        };
    }
};
__decorate([
    bind
], BudReactRefresh.prototype, "configAfter", null);
__decorate([
    bind
], BudReactRefresh.prototype, "make", null);
__decorate([
    bind
], BudReactRefresh.prototype, "configure", null);
__decorate([
    bind
], BudReactRefresh.prototype, "makeReactRefreshCallback", null);
BudReactRefresh = __decorate([
    label(`@roots/bud-react/react-refresh`),
    options({
        compilerExtension: undefined,
        esModule: DynamicOption.make(({ context }) => context.manifest?.type === `module`),
        overlay: false,
    }),
    development
], BudReactRefresh);
export default BudReactRefresh;
