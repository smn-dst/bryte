import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, development, label, } from '@roots/bud-framework/extension/decorators';
/**
 * Register `react-refresh-swc` transform with TSC compiler
 */
let BudSWCRefresh = class BudSWCRefresh extends Extension {
    /**
     * {@link Extension.buildBefore}
     */
    async buildBefore(bud) {
        await this.registerTransform(bud);
    }
    /**
     * Register `react-refresh-swc` transform plugin
     */
    async registerTransform({ isDevelopment, swc }) {
        this.logger.log(`Registering swc react-refresh transformer`);
        if (!swc) {
            this.logger.warn(`SWC not found. Skipping registration of ${this.constructor.name}.`);
            return this;
        }
        swc.setTransform((transform = {}) => ({
            ...(transform ?? {}),
            react: {
                ...(transform?.react ?? {}),
                development: isDevelopment,
                refresh: isDevelopment,
            },
        }));
    }
};
__decorate([
    bind
], BudSWCRefresh.prototype, "buildBefore", null);
BudSWCRefresh = __decorate([
    label(`@roots/bud-react/swc-refresh`),
    development
], BudSWCRefresh);
export default BudSWCRefresh;
