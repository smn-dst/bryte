import type { Bud } from '@roots/bud-framework';
import type { MultiStats, Stats } from '@roots/bud-framework/config';
import { BudError } from '@roots/bud-support/errors';
import logger from '@roots/bud-support/logger';
import Container from '@roots/container';
interface Contract {
    /**
     * Bud instance
     */
    app: Bud;
    /**
     * Boot callback
     */
    boot?(app: Bud): Promise<any>;
    /**
     * Bootstrap callback
     */
    bootstrap?(app: Bud): Promise<any>;
    /**
     * After build callback
     */
    buildAfter?(app: Bud): Promise<any>;
    /**
     * Before build callback
     */
    buildBefore?(app: Bud): Promise<any>;
    /**
     * Handle errors
     */
    catch(error: BudError | string): never;
    /**
     * Before compiler callback
     */
    compilerBefore?(app: Bud): Promise<any>;
    /**
     * Compiler done callback
     */
    compilerDone?(bud: Bud, stats: Stats & MultiStats): Promise<any>;
    /**
     * After config callback
     */
    configAfter?(app: Bud): Promise<any>;
    /**
     * Before config callback
     */
    configBefore?(app: Bud): Promise<any>;
    /**
     * Return the bud instance
     */
    done(): Bud;
    /**
     * Scoped logger
     */
    logger: typeof logger;
    /**
     * Register callback
     */
    register?(app: Bud): Promise<any>;
    /**
     * Server after callback
     */
    serverAfter?(app: Bud): Promise<any>;
    /**
     * Server before callback
     */
    serverBefore?(app: Bud): Promise<any>;
}
/**
 * Service
 *
 * @remarks
 * The Service interface provides access to the Bud parent container.
 *
 * A Service interfaces with the Framework through a series of callbacks at different points in the build.
 */
declare abstract class Base implements Contract {
    _app: () => Bud;
    /**
     * Class constructor
     */
    constructor(_app: () => Bud);
    /**
     * {@link Contract.app}
     * @readonly
     */
    get app(): Bud;
    /**
     * {@link Contract.boot}
     */
    boot?(app: Bud): Promise<any>;
    /**
     * {@link Contract.bootstrap}
     */
    bootstrap?(app: Bud): Promise<any>;
    /**
     * {@link Contract.buildAfter}
     */
    buildAfter?(app: Bud): Promise<any>;
    /**
     * {@link Contract.buildBefore}
     */
    buildBefore?(app: Bud): Promise<any>;
    /**
     * {@link Contract.catch}
     */
    catch(error: BudError | string): never;
    /**
     * {@link Contract.compilerBefore}
     */
    compilerBefore?(app: Bud): Promise<any>;
    /**
     * {@link Contract.compilerDone}
     */
    compilerDone?(bud: Bud, stats: Stats & MultiStats): Promise<any>;
    /**
     * {@link Contract.configAfter}
     */
    configAfter?(app: Bud): Promise<any>;
    /**
     * {@link Contract.done}
     */
    done(): Bud;
    /**
     * {@link Contract.logger}
     */
    get logger(): typeof logger;
    /**
     * {@link Contract.register}
     */
    register?(bud: Bud): Promise<any>;
    /**
     * {@link Contract.serverAfter}
     */
    serverAfter?(app: Bud): Promise<any>;
    /**
     * {@link Contract.serverBefore}
     */
    serverBefore?(app: Bud): Promise<any>;
}
/**
 * Service
 *
 * @remarks
 * The Service interface provides access to the {@link Bud} container.
 *
 * A Service interfaces with the Framework through a series of callbacks at different points in the build.
 */
declare abstract class BaseContainer extends Container implements Contract {
    _app: () => Bud;
    /**
     * Class constructor
     */
    constructor(_app: () => Bud);
    /**
     * {@link Contract.app}
     * @readonly
     */
    get app(): Bud;
    /**
     * {@link Contract.boot}
     */
    boot?(app: Bud): Promise<any>;
    /**
     * {@link Contract.bootstrap}
     */
    bootstrap?(app: Bud): Promise<any>;
    /**
     * {@link Contract.buildAfter}
     */
    buildAfter?(app: Bud): Promise<any>;
    /**
     * {@link Contract.buildBefore}
     */
    buildBefore?(app: Bud): Promise<any>;
    /**
     * {@link Contract.catch}
     */
    catch(error: BudError | string): never;
    /**
     * {@link Contract.compilerBefore}
     */
    compilerBefore?(app: Bud): Promise<any>;
    /**
     * {@link Contract.compilerDone}
     */
    compilerDone?(bud: Bud, stats: Stats & MultiStats): Promise<any>;
    /**
     * {@link Contract.configAfter}
     */
    configAfter?(app: Bud): Promise<any>;
    /**
     * {@link Contract.done}
     */
    done(): Bud;
    /**
     * {@link Contract.logger}
     */
    get logger(): typeof logger;
    /**
     * {@link Contract.register}
     */
    register?(bud: Bud): Promise<any>;
    /**
     * {@link Contract.serverAfter}
     */
    serverAfter?(app: Bud): Promise<any>;
    /**
     * {@link Contract.serverBefore}
     */
    serverBefore?(app: Bud): Promise<any>;
}
export { Base, Base as Service, Base as default, BaseContainer, BaseContainer as ServiceContainer, type Contract, };
