import isUndefined from '@roots/bud-support/isUndefined';
/**
 * Pipe a value through an array of functions. The return value of each callback is used as input for the next.
 *
 * @remarks
 * If no value is provided the value is assumed to be the {@link Bud} itself
 *
 * {@link sequence} is a non-mutational version of this method.
 *
 * @example
 * ```js
 * app.pipe(
 *   [
 *     value => value + 1,
 *     value => value + 1,
 *   ],
 *   1, // initial value
 * ) // resulting value is 3
 * ```
 */
export const pipe = async function (functions, maybeInitialValue) {
    return await functions.reduce(async (value, fn) => {
        const nextValue = await value;
        return await fn(nextValue);
    }, Promise.resolve(!isUndefined(maybeInitialValue) ? maybeInitialValue : this));
};
