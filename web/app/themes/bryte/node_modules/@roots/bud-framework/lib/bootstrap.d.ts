import type { Bud, BudService, Registry } from '@roots/bud-framework';
/**
 * Define the list of lifecycle events that are handled by the system
 */
export declare const lifecycleHookHandles: Partial<Array<`${keyof Registry.EventsStore & string}`>>;
/**
 * Define the corresponding methods in the Service class for each lifecycle event
 */
export declare const lifecycleMethods: Array<`${keyof BudService}`>;
/**
 * Define the list of services that should only be instantiated in the parent compiler context
 */
export declare const PARENT_SERVICES: string[];
/**
 * Define the list of services that should only be instantiated during development
 */
export declare const DEVELOPMENT_SERVICES: string[];
/**
 * Map the lifecycle events to their corresponding Service class methods
 */
export declare const lifecycle: {
    boot: string;
    bootstrap: string;
    'build.after': string;
    'build.before': string;
    'compiler.before': string;
    'compiler.done': string;
    'config.after': string;
    'config.before': string;
    register: string;
    'server.after': string;
    'server.before': string;
};
export declare const services: Array<string>;
/**
 * Bootstrap the application. This involves the following steps:
 *
 * - Initialize the application context and an empty list of services
 * - Bind the application's methods to the application context
 * - Instantiate the necessary services and initialize the application
 * - Bind the service's lifecycle methods to the corresponding lifecycle events
 * - Fire lifecycle events in order and process any queued API calls after each event
 * - Write the module's resolutions and file checksums to the filesystem
 *
 * @param bud - Bud instance
 * @returns Promise<void>
 */
export declare const bootstrap: (bud: Bud) => Promise<Bud>;
