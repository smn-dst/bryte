import { platform } from 'node:os';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import isEmpty from '@roots/bud-support/isEmpty';
import isString from '@roots/bud-support/isString';
import isUndefined from '@roots/bud-support/isUndefined';
import logger from '@roots/bud-support/logger';
import { open, openEditor } from '@roots/bud-support/open';
/**
 * Path to roots-notifier binary
 *
 * @description
 * Used to open notifications on macOS
 */
const notifierPath = resolve(dirname(fileURLToPath(import.meta.url)), `..`, // bud-framework
`vendor`, `mac.no-index`, `roots-notifier.app`, `Contents`, `MacOS`, `roots-notifier`);
/**
 * Notifier
 */
export class Notifier {
    _app;
    /**
     * Browser to open on error
     */
    browser;
    /**
     * Node-notifier notification center instance
     */
    notificationCenter;
    /**
     * Class constructor
     */
    constructor(_app) {
        this._app = _app;
        this.make = this.make.bind(this);
        this.notify = this.notify.bind(this);
        this.openBrowser = this.openBrowser.bind(this);
        this.openEditor = this.openEditor.bind(this);
        this.browserOpened = false;
    }
    /**
     * Get bud instance
     */
    get app() {
        return this._app();
    }
    /**
     * Editor to open on error
     */
    get editor() {
        if (!isUndefined(this.app.context.editor)) {
            return this.app.context.editor;
        }
        if (this.app.env.has(`BUD_EDITOR`)) {
            return this.app.env.get(`BUD_EDITOR`);
        }
        if (this.app.env.has(`VISUAL`)) {
            return this.app.env.get(`VISUAL`);
        }
        if (this.app.env.has(`EDITOR`)) {
            return this.app.env.get(`EDITOR`);
        }
        return false;
    }
    /**
     * Make notifier
     */
    async make(bud) {
        if (this.notificationsEnabled) {
            const { NotificationCenter } = await import(`@roots/bud-support/node-notifier`);
            this.notificationCenter =
                platform() !== `darwin`
                    ? new NotificationCenter()
                    : new NotificationCenter({ customPath: notifierPath });
        }
    }
    /**
     * True if notifications are enabled
     */
    get notificationsEnabled() {
        if (this.app?.context.notify === true) {
            logger.scope(`notifier`).log(`Notifications enabled`);
            return true;
        }
        if (this.app?.context.notify === undefined &&
            platform() === `darwin`) {
            logger.scope(`notifier`).log(`Notifications enabled (macos default)`);
            return true;
        }
        return false;
    }
    /**
     * Emit OS notification center notice
     */
    notify(notification, callback) {
        if (!this.notificationsEnabled)
            return;
        this.notificationCenter.notify({
            group: this.app.label,
            title: this.app.label,
            ...notification,
        }, callback);
    }
    /**
     * Open browser in development
     */
    async openBrowser(url) {
        if (!this.app.isDevelopment)
            return;
        if (!isString(url))
            return;
        if (this.browserOpened)
            return;
        this.browserOpened = true;
        if (isString(this.browser)) {
            return await open(url, { app: { name: this.browser } });
        }
        return await open(url);
    }
    /**
     * Open editor on error
     */
    openEditor(input) {
        if (!this.openEditorEnabled)
            return;
        if (!input || isEmpty(input))
            return;
        const files = Array.isArray(input) ? input : [input];
        if (isString(this.editor))
            return openEditor(files, { editor: this.editor });
        return openEditor(files);
    }
    /**
     * If --editor flag is passed
     */
    get openEditorEnabled() {
        return (!isUndefined(this.app.context.editor) &&
            this.app.context.editor !== false);
    }
}
