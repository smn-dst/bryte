import { jsx as _jsx, jsxs as _jsxs } from "@roots/bud-support/jsx-runtime";
import { exit } from 'node:process';
import figures from '@roots/bud-support/figures';
import { Box, Text, useEffect, useInput, useState, } from '@roots/bud-support/ink';
export const Menu = ({ cli }) => {
    const [defined] = useState(cli.definitions());
    const [selected, setSelected] = useState(0);
    const [running, setRunning] = useState(false);
    const [items, setItems] = useState([]);
    useEffect(() => {
        setItems(defined
            .filter(cmd => cmd.path !== `bud`)
            .reduce((acc, cmd, id) => {
            return [
                ...acc,
                cmd.examples
                    ?.map(([description, path]) => {
                    return { cmd, description, id, path };
                })
                    .shift(),
            ].filter(Boolean);
        }, []));
    }, [defined]);
    useInput((key, input) => {
        if (input.escape) {
            // eslint-disable-next-line n/no-process-exit
            exit();
        }
        if (running)
            return;
        input[`downArrow`] && setSelected(selected + 1);
        input[`upArrow`] && setSelected(selected - 1);
        if (input.return) {
            setRunning(true);
            cli.run(items[selected].path.split(` `).slice(1));
        }
    });
    useEffect(() => {
        if (selected > items.length - 1)
            setSelected(0);
        if (selected < 0)
            setSelected(items.length - 1);
    }, [items, selected]);
    if (running)
        return null;
    return (_jsxs(Box, { flexDirection: "column", gap: 1, marginY: 1, children: [_jsxs(Box, { flexDirection: "row", justifyContent: "space-between", children: [_jsx(Box, { flexDirection: "row", gap: 1, children: _jsx(Text, { bold: true, children: "bud.js" }) }), _jsxs(Text, { children: ["v", cli.binaryVersion] })] }), _jsx(Text, { italic: true, children: defined[0].description.trim() }), _jsx(Box, { flexDirection: "column", gap: 0, children: items.map(({ cmd, description, path }, id) => {
                    return (_jsxs(Text, { color: selected === id ? `blue` : `white`, children: [selected === id ? figures.radioOn : figures.radioOff, ` `, path.trim(), _jsxs(Text, { color: "white", dimColor: true, children: [` `, description.trim()] })] }, id));
                }) })] }));
};
