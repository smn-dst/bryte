import type { Bud } from '@roots/bud-framework';
import { type OptionCallbackValue } from '@roots/bud-framework/extension';
import type { BudPostCssPublicInterface, Options, PluginInput, PluginReference } from './options.js';
import { BudPostCssOptionsApi } from './options.js';
/**
 * PostCSS configuration
 */
declare class BudPostCss extends BudPostCssOptionsApi {
    /**
     * Get a plugin
     */
    getPlugin(name: string): PluginReference;
    /**
     * Get plugin options
     */
    getPluginOptions(name: string): Record<string, any>;
    /**
     * Get plugin path
     */
    getPluginPath(name: string): PluginReference[0];
    hasPlugin(name: string): boolean;
    protected normalizePluginName(name: string): string;
    protected normalizePluginValue(value: PluginInput): PluginReference;
    /**
     * {@link Extension.register}
     */
    register({ build, context, hooks, }: Bud): Promise<void>;
    /**
     * `postcssOptions`
     * @readonly
     */
    get result(): Options[`postcssOptions`];
    /**
     * Set a plugin
     */
    setPlugin(name: string, plugin?: PluginInput): this;
    /**
     * Override plugin options
     */
    setPluginOptions(name: string, options: ((options: Record<string, any>) => Record<string, any>) | Record<string, any>): this;
    /**
     * Set plugin path
     */
    setPluginPath(name: string, path: PluginInput & string): this;
    /**
     * Remove a plugin
     */
    unsetPlugin(name: string): this;
    /**
     * Use plugins
     *
     * @remarks
     * Sets the plugin order
     */
    use(order: OptionCallbackValue<BudPostCssPublicInterface, `order`>): this;
}
export { BudPostCss as default, type BudPostCssPublicInterface };
