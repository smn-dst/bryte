import type { Plugin, Processor } from 'postcss';
import { Extension, type OptionCallbackValue, type StrictPublicExtensionApi } from '@roots/bud-framework/extension';
type PluginReference = [Plugin | Processor | string, any?];
type PluginInput = Plugin | PluginReference | Processor | string;
type PluginInputList = Array<PluginInput>;
type PluginRecords = Record<string, PluginReference>;
/**
 * PostCSS configuration options
 */
type Options = {
    config?: boolean;
    order: Array<`${keyof PluginRecords & string}`>;
    parser?: string;
    plugins: PluginRecords;
    postcssOptions?: {
        config?: boolean;
        parser?: string;
        plugins?: Array<PluginReference>;
        syntax?: string;
    };
    sourceMap?: boolean;
    syntax?: string;
};
type BudPostCssPublicInterface = StrictPublicExtensionApi<BudPostCssOptionsApi, Options> & {
    getConfig(): boolean;
    getPlugin(name: string): PluginReference;
    getPluginOptions(name: string): Record<string, any>;
    getPluginPath(name: string): string;
    hasPlugin(name: string): boolean;
    setConfig(config: boolean): BudPostCssPublicInterface;
    setPlugin(name: string, plugin?: PluginInput): BudPostCssPublicInterface;
    setPluginOptions(name: string, options: Record<string, any>): BudPostCssPublicInterface;
    setPluginPath(name: string, path: string): BudPostCssPublicInterface;
    unsetPlugin(name: string): BudPostCssPublicInterface;
    use(plugins: OptionCallbackValue<Options, `order`>): BudPostCssPublicInterface;
};
declare class BudPostCssOptionsApi extends Extension<Options> {
    /**
     * PostCss config
     */
    config: BudPostCssPublicInterface[`config`];
    /**
     * Get postcss config
     */
    getConfig: BudPostCssPublicInterface[`getConfig`];
    /**
     * Get PostCss plugin order
     */
    getOrder: BudPostCssPublicInterface[`getOrder`];
    /**
     * Get PostCss parser
     */
    getParser: BudPostCssPublicInterface[`getParser`];
    /**
     * Get PostCss plugins
     */
    getPlugins: BudPostCssPublicInterface[`getPlugins`];
    /**
     * get postcssOptions
     */
    getPostcssOptions: BudPostCssPublicInterface[`getPostcssOptions`];
    /**
     * get sourceMap option
     */
    getSourceMap: BudPostCssPublicInterface[`getSourceMap`];
    /**
     * Get PostCss syntax
     */
    getSyntax: BudPostCssPublicInterface[`getSyntax`];
    /**
     * PostCss plugin order
     */
    order: BudPostCssPublicInterface[`order`];
    /**
     * Parser
     */
    parser: BudPostCssPublicInterface[`parser`];
    /**
     * PostCss plugins
     */
    plugins: BudPostCssPublicInterface[`plugins`];
    /**
     * postcssOptions
     */
    postcssOptions: BudPostCssPublicInterface[`postcssOptions`];
    /**
     * Set postcss config
     */
    setConfig: BudPostCssPublicInterface[`setConfig`];
    /**
     * Set PostCss plugin order
     */
    setOrder: BudPostCssPublicInterface[`setOrder`];
    /**
     * Set PostCss parser
     */
    setParser: BudPostCssPublicInterface[`setParser`];
    /**
     * Set PostCss plugins
     */
    setPlugins: BudPostCssPublicInterface[`setPlugins`];
    /**
     * set postcssOptions
     */
    setPostcssOptions: BudPostCssPublicInterface[`setPostcssOptions`];
    /**
     * set sourceMap option
     */
    setSourceMap: BudPostCssPublicInterface[`setSourceMap`];
    /**
     * Set PostCss syntax
     */
    setSyntax: BudPostCssPublicInterface[`setSyntax`];
    /**
     * sourceMap option
     */
    sourceMap: BudPostCssPublicInterface[`sourceMap`];
    /**
     * Syntax
     */
    syntax: BudPostCssPublicInterface[`syntax`];
}
export { BudPostCssOptionsApi, type BudPostCssPublicInterface, type Options, type PluginInput, type PluginInputList, type PluginRecords, type PluginReference, };
