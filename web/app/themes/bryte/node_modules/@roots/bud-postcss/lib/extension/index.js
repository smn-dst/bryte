import { __decorate } from "tslib";
import { Extension, } from '@roots/bud-framework/extension';
import { bind, expose, label, } from '@roots/bud-framework/extension/decorators';
import isFunction from '@roots/bud-support/isFunction';
import isString from '@roots/bud-support/isString';
import isUndefined from '@roots/bud-support/isUndefined';
import omit from '@roots/bud-support/omit';
import { BudPostCssOptionsApi } from './options.js';
/**
 * PostCSS configuration
 */
let BudPostCss = class BudPostCss extends BudPostCssOptionsApi {
    /**
     * Get a plugin
     */
    getPlugin(name) {
        name = this.normalizePluginName(name);
        if (!(name in this.plugins)) {
            throw new Error(`Plugin ${name} does not exist`);
        }
        return this.plugins[name];
    }
    /**
     * Get plugin options
     */
    getPluginOptions(name) {
        const plugin = this.getPlugin(this.normalizePluginName(name));
        if (!plugin)
            throw new Error(`Plugin ${name} does not exist`);
        return plugin[1];
    }
    /**
     * Get plugin path
     */
    getPluginPath(name) {
        const plugin = this.getPlugin(this.normalizePluginName(name));
        if (!plugin)
            throw new Error(`Plugin ${name} does not exist`);
        return plugin[0];
    }
    hasPlugin(name) {
        return this.normalizePluginName(name) in this.plugins;
    }
    normalizePluginName(name) {
        if (name.startsWith(`postcss-`))
            name = name.replace(`postcss-`, ``);
        if (name === `nested`)
            name = `nesting`;
        if (name === `preset-env`)
            name = `env`;
        return name;
    }
    normalizePluginValue(value) {
        if (isString(value)) {
            return [value, undefined];
        }
        if (!Array.isArray(value)) {
            return [value, undefined];
        }
        return value;
    }
    /**
     * {@link Extension.register}
     */
    async register({ build, context, hooks, }) {
        const loader = await this.resolve(`postcss-loader`, import.meta.url);
        if (!loader)
            throw new Error(`postcss-loader not found`);
        hooks.on(`build.resolveLoader.alias`, (aliases = {}) => ({
            ...aliases,
            [`postcss-loader`]: loader,
        }));
        build
            .setLoader(`postcss`, await this.resolve(`postcss-loader`, import.meta.url))
            .setItem(`postcss`, {
            loader: `postcss`,
            options: () => ({
                postcssOptions: this.result,
                sourceMap: this.get(`sourceMap`),
            }),
        });
        build.rules.css.setUse((items = []) => [...items, `postcss`]);
        build.rules[`css-module`]?.setUse((items = []) => [
            ...items,
            `postcss`,
        ]);
        const config = Object.values(context.files).find(file => file?.name?.includes(`postcss`) && file?.module);
        if (config) {
            this.logger.log(`PostCSS configuration is being overridden by project configuration file.`);
            this.setConfig(true);
            if (isString(config.path))
                hooks.on(`build.cache.buildDependencies`, paths => ({
                    ...paths,
                    postcss: [config.path],
                }));
            return;
        }
        this.setPlugin(`import`, await this.resolve(`postcss-import`, import.meta.url))
            .setPlugin(`nesting`, await this.resolve(`postcss-nested`, import.meta.url))
            .setPlugin(`env`, await this.resolve(`postcss-preset-env`, import.meta.url).then(path => path.replace(`.mjs`, `.cjs`)))
            .setPluginOptions(`env`, {
            features: {
                'focus-within-pseudo-class': false,
            },
            stage: 1,
        })
            .use([`import`, `nesting`, `env`]);
    }
    /**
     * `postcssOptions`
     * @readonly
     */
    get result() {
        const explicitOptions = this.postcssOptions;
        if (!isUndefined(explicitOptions) &&
            Object.keys(explicitOptions).length > 0) {
            this.logger.info(`postcss explicitOptions`, explicitOptions);
            return explicitOptions;
        }
        const options = Object.entries({
            ...omit(this.options, [`plugins`, `order`, `postcssOptions`]),
            plugins: this.get(`order`).map(this.getPlugin).filter(Boolean),
        })
            .filter(([k, v]) => !isUndefined(v))
            .reduce((a, [k, v]) => ({ ...a, [k]: v }), {});
        this.logger.info(`postcss options`, options);
        return options;
    }
    /**
     * Set a plugin
     */
    setPlugin(name, plugin) {
        this.setPlugins(plugins => ({
            ...plugins,
            [this.normalizePluginName(name)]: this.normalizePluginValue(plugin ?? name),
        }));
        return this;
    }
    /**
     * Override plugin options
     */
    setPluginOptions(name, options) {
        const plugin = this.getPlugin(this.normalizePluginName(name));
        if (!plugin) {
            throw new Error(`${name} does not exist`);
        }
        this.setPlugin(name, [
            plugin[0],
            isFunction(options) ? options(plugin[1]) : options,
        ]);
        return this;
    }
    /**
     * Set plugin path
     */
    setPluginPath(name, path) {
        const plugin = this.getPlugin(this.normalizePluginName(name));
        if (!plugin)
            throw new Error(`Plugin ${name} does not exist`);
        this.setPlugin(name, [path, plugin[1]]);
        return this;
    }
    /**
     * Remove a plugin
     */
    unsetPlugin(name) {
        this.setPlugins(plugins => omit(plugins, [this.normalizePluginName(name)]));
        return this;
    }
    /**
     * Use plugins
     *
     * @remarks
     * Sets the plugin order
     */
    use(order) {
        this.setOrder(order);
        return this;
    }
};
__decorate([
    bind
], BudPostCss.prototype, "getPlugin", null);
__decorate([
    bind
], BudPostCss.prototype, "getPluginOptions", null);
__decorate([
    bind
], BudPostCss.prototype, "getPluginPath", null);
__decorate([
    bind
], BudPostCss.prototype, "hasPlugin", null);
__decorate([
    bind
], BudPostCss.prototype, "normalizePluginName", null);
__decorate([
    bind
], BudPostCss.prototype, "normalizePluginValue", null);
__decorate([
    bind
], BudPostCss.prototype, "register", null);
__decorate([
    bind
], BudPostCss.prototype, "setPlugin", null);
__decorate([
    bind
], BudPostCss.prototype, "setPluginOptions", null);
__decorate([
    bind
], BudPostCss.prototype, "setPluginPath", null);
__decorate([
    bind
], BudPostCss.prototype, "unsetPlugin", null);
__decorate([
    bind
], BudPostCss.prototype, "use", null);
BudPostCss = __decorate([
    label(`@roots/bud-postcss`),
    expose(`postcss`)
], BudPostCss);
export { BudPostCss as default };
