import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, label, options, } from '@roots/bud-framework/extension/decorators';
import WordPressJSONPlugin, {} from '@roots/wordpress-theme-json-webpack-plugin';
import * as tailwindAdapter from './tailwind/index.js';
/**
 * Support Tailwind values in {@link Bud.wpjson}
 */
let TailwindThemeJSON = class TailwindThemeJSON extends Extension {
    /**
     * {@link Extension.apply}
     */
    apply(compiler) {
        compiler.hooks.thisCompilation.tap(`@roots/bud-tailwindcss-theme-json`, compilation => {
            const hooks = WordPressJSONPlugin.getCompilationHooks(compilation);
            hooks.dependencies.tap(`@roots/bud-tailwindcss-theme-json`, dependencies => [...dependencies, this.app.tailwind.configPath]);
            hooks.options.tapPromise(`@roots/bud-tailwindcss-theme-json`, async (data) => {
                if (this.app.isDevelopment)
                    await this.app.tailwind.sourceConfig();
                if (this.options.color) {
                    data = this.tapTailwindColor(data);
                }
                if (this.options.fontFamily) {
                    data = this.tapTailwindFontFamily(data);
                }
                if (this.options.fontSize) {
                    data = this.tapTailwindFontSize(data);
                }
                if (this.options.spacing) {
                    data = this.tapTailwindSpacing(data);
                }
                return data;
            });
        });
    }
    /**
     * {@link Extension.register}
     */
    async register(bud) {
        if (!(`wpjson` in bud))
            return;
        bud.wpjson.useTailwindColors = this.useTailwindColors;
        bud.wpjson.useTailwindFontFamily = this.useTailwindFontFamily;
        bud.wpjson.useTailwindFontSize = this.useTailwindFontSize;
        bud.wpjson.useTailwindSpacing = this.useTailwindSpacing;
    }
    tapTailwindColor(options) {
        const palette = tailwindAdapter.palette.transform({
            ...this.app.tailwind.resolveThemeValue(`colors`, this.options.color === `extend`),
        });
        return {
            ...(options ?? {}),
            settings: {
                ...(options?.settings ?? {}),
                color: {
                    ...(options?.settings?.color ?? {}),
                    palette,
                },
            },
            version: 2,
        };
    }
    tapTailwindFontFamily(json) {
        const fontFamilies = tailwindAdapter.fontFamily.transform({
            ...this.app.tailwind.resolveThemeValue(`fontFamily`, this.options.fontFamily === `extend`),
        });
        return {
            ...(json ?? {}),
            settings: {
                ...(json?.settings ?? {}),
                typography: {
                    ...(json?.settings?.typography ?? {}),
                    fontFamilies,
                },
            },
            version: 2,
        };
    }
    tapTailwindFontSize(options) {
        const fontSizes = tailwindAdapter.fontSize.transform({
            ...this.app.tailwind.resolveThemeValue(`fontSize`, this.options.fontSize === `extend`),
        });
        return {
            ...(options ?? {}),
            settings: {
                ...(options?.settings ?? {}),
                typography: {
                    ...(options?.settings?.typography ?? {}),
                    fontSizes,
                },
            },
            version: 2,
        };
    }
    tapTailwindSpacing(options) {
        const spacingSizes = tailwindAdapter.spacing.transform({
            ...this.app.tailwind.resolveThemeValue(`spacing`, this.options.spacingSize === `extend`),
        });
        return {
            ...(options ?? {}),
            settings: {
                ...(options?.settings ?? {}),
                spacing: {
                    ...(options?.settings?.spacing ?? {}),
                    spacingSizes,
                },
            },
            version: 2,
        };
    }
    useTailwindColors(extend) {
        this.app.wpjson.enable();
        this.handleOption(`color`, extend);
        return this.app.wpjson;
    }
    useTailwindFontFamily(extend) {
        this.app.wpjson.enable();
        this.handleOption(`fontFamily`, extend);
        return this.app.wpjson;
    }
    useTailwindFontSize(extend) {
        this.app.wpjson.enable();
        this.handleOption(`fontSize`, extend);
        return this.app.wpjson;
    }
    useTailwindSpacing(extend) {
        this.app.wpjson.enable();
        this.handleOption(`spacing`, extend);
        return this.app.wpjson;
    }
    handleOption(option, value) {
        switch (value) {
            case `extend`:
                this.set(option, `extend`);
                break;
            case true:
                this.set(option, `extend`);
                break;
            case false:
                this.set(option, false);
                break;
            default:
                this.set(option, true);
        }
    }
};
__decorate([
    bind
], TailwindThemeJSON.prototype, "apply", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "register", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "tapTailwindColor", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "tapTailwindFontFamily", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "tapTailwindFontSize", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "tapTailwindSpacing", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "useTailwindColors", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "useTailwindFontFamily", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "useTailwindFontSize", null);
__decorate([
    bind
], TailwindThemeJSON.prototype, "useTailwindSpacing", null);
TailwindThemeJSON = __decorate([
    label(`@roots/bud-tailwindcss-theme-json`),
    options({
        color: false,
        fontFamily: false,
        fontSize: false,
        spacing: false,
    })
], TailwindThemeJSON);
export { TailwindThemeJSON };
