import type { Options } from '@roots/wordpress-theme-json-webpack-plugin';
import { Extension, type OptionGetter, type OptionSetter } from '@roots/bud-framework/extension';
import Container from '@roots/container';
import ThemeJsonWebpackPlugin from '@roots/wordpress-theme-json-webpack-plugin';
/**
 * Callback function used to configure wordpress `theme.json`
 */
interface Mutator {
    (json: Container<Partial<Options['settings']>>): Container<Partial<Options['settings']>>;
    (json: Partial<Options['settings']>): Partial<Options['settings']>;
}
/**
 * WordPress theme.json configuration
 *
 * @example
 * ```ts
 * bud.themeJson(theme =>
 *   theme.set('color', {})
 * )
 * ```
 */
declare class WordPressThemeJson extends Extension<Options, ThemeJsonWebpackPlugin> {
    customTemplates: Options['customTemplates'];
    getCustomTemplates: OptionGetter<Options, `customTemplates`>;
    setCustomTemplates: OptionSetter<WordPressThemeJson, Options, `customTemplates`>;
    readonly __generated__: Options[`__generated__`];
    get__generated__: OptionGetter<Options, `__generated__`>;
    set__generated__: OptionSetter<WordPressThemeJson, Options, `__generated__`>;
    readonly path: Options['path'];
    getPath: OptionGetter<Options, `path`>;
    setPath: OptionSetter<WordPressThemeJson, Options, `path`>;
    readonly patterns: Options['patterns'];
    getPatterns: OptionGetter<Options, `patterns`>;
    setPatterns: OptionSetter<WordPressThemeJson, Options, `patterns`>;
    getSettings: OptionGetter<Options, `settings`>;
    setSettings: OptionSetter<WordPressThemeJson, Options, `settings`>;
    readonly styles: Options['styles'];
    getStyles: OptionGetter<Options, `styles`>;
    setStyles: OptionSetter<WordPressThemeJson, Options, `styles`>;
    readonly title: Options['title'];
    getTitle: OptionGetter<Options, `title`>;
    setTitle: OptionSetter<WordPressThemeJson, Options, `title`>;
    readonly version: Options['version'];
    getVersion: OptionGetter<Options, `version`>;
    setVersion: OptionSetter<WordPressThemeJson, Options, `version`>;
    readonly templateParts: Options['templateParts'];
    getTemplateParts: OptionGetter<Options, `templateParts`>;
    setTemplateParts: OptionSetter<WordPressThemeJson, Options, `templateParts`>;
    /**
     * ## bud.wp.json.useTailwindColors
     *
     * Source settings.color.palette values from tailwind config
     *
     * Requires {@link https://bud.js.org/extensions/bud-tailwindcss/ @roots/bud-tailwindcss} to be installed.
     *
     * @example
     * ```ts
     * bud.wp.json.useTailwindColors()
     * bud.wp.json.useTailwindColors(true)
     * ```
     *
     * @example
     * Limit to `theme.extend.colors` values
     *
     * ```ts
     * bud.wp.json.useTailwindColors(`extend`)
     * ```
     *
     * @example
     * Do not source values from tailwind config
     *
     * ```ts
     * bud.wp.json.useTailwindColors(false)
     * ```
     */
    useTailwindColors?: (value?: `extend` | boolean) => WordPressThemeJson;
    /**
     * ## bud.wp.json.useTailwindFontFamily
     *
     * Source settings.typography.fontFamilies values from tailwind config
     *
     * Requires {@link https://bud.js.org/extensions/bud-tailwindcss/ @roots/bud-tailwindcss} to be installed.
     *
     * @example
     * ```ts
     * bud.wp.json.useTailwindFontFamily()
     * bud.wp.json.useTailwindFontFamily(true)
     * ```
     *
     * @example
     * Limit to `theme.extend.fontFamily` values
     *
     * ```ts
     * bud.wp.json.useTailwindFontFamily(`extend`)
     * ```
     *
     * @example
     * Disable
     *
     * ```ts
     * bud.wp.json.useTailwindFontFamily(false)
     * ```
     */
    useTailwindFontFamily?: (value?: `extend` | boolean) => WordPressThemeJson;
    /**
     * ## bud.wp.json.useTailwindFontSize
     *
     * Source settings.typography.fontSizes values from tailwind config
     *
     * Requires {@link https://bud.js.org/extensions/bud-tailwindcss/ @roots/bud-tailwindcss} to be installed.
     *
     * @example
     * ```ts
     * bud.wp.json.useTailwindFontSize()
     * bud.wp.json.useTailwindFontSize(true)
     * ```
     *
     * @example
     * Limit to `theme.extend.fontSize` values
     *
     * ```ts
     * bud.wp.json.useTailwindFontSize(`extend`)
     * ```
     *
     * @example
     * Disable
     *
     * ```ts
     * bud.wp.json.useTailwindFontSize(false)
     * ```
     */
    useTailwindFontSize?: (value?: `extend` | boolean) => WordPressThemeJson;
    /**
     * ## bud.wp.json.useTailwindSpacing
     *
     * Source `theme.json` spacing values from `tailwind.config.js`
     *
     * Requires {@link https://bud.js.org/extensions/bud-tailwindcss/ @roots/bud-tailwindcss} to be installed.
     *
     * @example
     * ```ts
     * bud.wp.json.useTailwindSpacing()
     * ```
     *
     * @example
     * Source theme.spacing values but limit to `extend` values
     *
     * ```ts
     * bud.wp.json.useTailwindSpacing(`extend`)
     * ```
     *
     * @example
     * Disable
     *
     * ```ts
     * bud.wp.json.useTailwindSpacing(false)
     * ```
     */
    useTailwindSpacing?: (value?: `extend` | boolean) => WordPressThemeJson;
    /**
     * ## bud.wp.json.settings
     *
     * Edit the `settings` key of theme.json
     *
     * @example
     * ```ts
     * bud.wp.json.settings({
     *  color: {
     *    custom: false,
     *    customGradient: false,
     *    palette: [
     *      {
     *        color: '#f7fafc',
     *        name: 'Gray',
     *        slug: 'gray'
     *      }
     *    ]
     * })
     * ```
     *
     * @example
     * Edit existing values with a callback:
     *
     * ```ts
     * bud.wp.json.settings((settings = {}) => ({
     *   ...settings,
     *   color: {},
     * }))
     * ```
     */
    settings(input: boolean | Container<Partial<Options['settings']>> | Mutator | Partial<Options['settings']>, raw?: boolean): this;
}
export { WordPressThemeJson };
