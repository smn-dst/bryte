import { __decorate } from "tslib";
import { join } from 'node:path';
import { isBuildDependency } from '@roots/bud-cache/helpers';
import { Service } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators/bind';
/**
 * {@link Bud.cache}
 */
export default class Cache extends Service {
    /**
     * {@link BudCache.allowCollectingMemory}
     */
    get allowCollectingMemory() {
        const fallback = true;
        const value = this.app.hooks.filter(`build.cache.allowCollectingMemory`, fallback);
        return typeof value === `boolean` ? value : fallback;
    }
    set allowCollectingMemory(value) {
        this.app.hooks.on(`build.cache.allowCollectingMemory`, value);
    }
    /**
     *{@link BudCache.buildDependencies}
     */
    get buildDependencies() {
        const projectDependencies = new Set([
            this.app.context.files[`package`]?.path,
            ...Object.values(this.app.context.files)
                .filter(isBuildDependency)
                .map(({ path }) => path),
        ]);
        const records = {
            project: [...projectDependencies].filter(Boolean),
        };
        return (this.app.hooks.filter(`build.cache.buildDependencies`, records) ??
            records);
    }
    set buildDependencies(dependencies) {
        this.app.hooks.on(`build.cache.buildDependencies`, dependencies);
    }
    /**
     * {@link BudCache.cacheDirectory}
     */
    get cacheDirectory() {
        const fallback = this.app.path(`@storage`, this.app.label, `cache`);
        return (this.app.hooks.filter(`build.cache.cacheDirectory`, fallback) ??
            fallback);
    }
    set cacheDirectory(directory) {
        this.app.hooks.on(`build.cache.cacheDirectory`, directory);
    }
    /**
     * {@link BudCache.name}
     */
    get name() {
        const fallback = join(this.app.mode, ...Object.values(this.app.context._ ?? {}));
        return (this.app.hooks.filter(`build.cache.name`, this.app.hooks.filter(`build.name`, fallback)) ?? fallback);
    }
    set name(name) {
        this.app.hooks.on(`build.cache.name`, name);
    }
    /**
     * {@link BudCache.type}
     */
    get type() {
        return (this.app.hooks.filter(`build.cache.type`, `filesystem`) ??
            `filesystem`);
    }
    set type(type) {
        this.app.hooks.on(`build.cache.type`, type);
    }
    /**
     * {@link BudCache.version}
     */
    get version() {
        return this.app.hooks.filter(`build.cache.version`, undefined);
    }
    set version(version) {
        this.app.hooks.on(`build.cache.version`, version);
    }
    /**
     * {@link Service.boot}
     */
    async boot(bud) {
        if (bud.context.force === true) {
            await this.flush();
        }
        this.enabled = bud.context.cache !== false;
    }
    /**
     * {@link BudCache.configuration}
     * @readonly
     */
    get configuration() {
        if (this.enabled !== true)
            return false;
        if (this.type === `memory`)
            return {
                cacheUnaffected: true,
                maxGenerations: Infinity,
                type: `memory`,
            };
        return {
            allowCollectingMemory: this.allowCollectingMemory,
            buildDependencies: this.buildDependencies,
            cacheDirectory: this.cacheDirectory,
            compression: this.app.isDevelopment ? false : `brotli`,
            hashAlgorithm: `xxhash64`,
            idleTimeout: 100,
            idleTimeoutForInitialStore: 0,
            managedPaths: [this.cacheDirectory, this.app.path(`@modules`)],
            maxMemoryGenerations: Infinity,
            name: this.name,
            profile: this.app.context.debug === true,
            store: `pack`,
            type: this.type,
        };
    }
    /**
     * {@link BudCache.flush}
     */
    async flush() {
        await this.app.fs.remove(this.cacheDirectory);
    }
    /**
     * Get {@link BudCache.allowCollectingMemory}
     */
    getAllowCollectingMemory() {
        return this.allowCollectingMemory;
    }
    /**
     * Get {@link BudCache.buildDependencies}
     */
    getBuildDependencies() {
        return this.buildDependencies;
    }
    /**
     * Get {@link BudCache.cacheDirectory}
     */
    getCacheDirectory() {
        return this.cacheDirectory;
    }
    /**
     * Get {@link BudCache.type}
     */
    getType() {
        return this.type;
    }
    /**
     * {@link BudCache.register}
     */
    async register(bud) {
        this.enabled = bud.context.cache !== false;
        this.version = bud.context.bud.version;
    }
    /**
     * Set {@link BudCache.allowCollectingMemory}
     */
    setAllowCollectingMemory(value) {
        this.allowCollectingMemory = value;
        return this;
    }
    /**
     * Set {@link BudCache.buildDependencies}
     */
    setBuildDependencies(dependencies) {
        this.buildDependencies = dependencies;
        return this;
    }
    /**
     * Set {@link BudCache.cacheDirectory}
     */
    setCacheDirectory(directory) {
        this.cacheDirectory = directory;
        return this;
    }
    /**
     * Set {@link BudCache.type}
     */
    setType(type) {
        this.type = type;
        return this;
    }
}
__decorate([
    bind
], Cache.prototype, "boot", null);
__decorate([
    bind
], Cache.prototype, "flush", null);
__decorate([
    bind
], Cache.prototype, "register", null);
