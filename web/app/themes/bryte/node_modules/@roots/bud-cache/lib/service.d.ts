import type { Bud } from '@roots/bud-framework';
import type { Configuration, FileCacheOptions } from '@roots/bud-framework/config';
import type { Cache as BudCache, CacheCallback as Callback } from '@roots/bud-framework/services/cache';
import { Service } from '@roots/bud-framework/service';
/**
 * {@link Bud.cache}
 */
export default class Cache extends Service implements BudCache {
    /**
     * {@link BudCache.enabled}
     */
    enabled: boolean;
    /**
     * {@link BudCache.allowCollectingMemory}
     */
    get allowCollectingMemory(): FileCacheOptions[`allowCollectingMemory`];
    set allowCollectingMemory(value: Callback<FileCacheOptions[`allowCollectingMemory`]>);
    /**
     *{@link BudCache.buildDependencies}
     */
    get buildDependencies(): FileCacheOptions[`buildDependencies`];
    set buildDependencies(dependencies: Callback<FileCacheOptions[`buildDependencies`]>);
    /**
     * {@link BudCache.cacheDirectory}
     */
    get cacheDirectory(): string;
    set cacheDirectory(directory: Callback<FileCacheOptions[`cacheDirectory`]>);
    /**
     * {@link BudCache.name}
     */
    get name(): string;
    set name(name: string);
    /**
     * {@link BudCache.type}
     */
    get type(): `filesystem` | `memory`;
    set type(type: Callback<`filesystem` | `memory`>);
    /**
     * {@link BudCache.version}
     */
    get version(): string | undefined;
    set version(version: string);
    /**
     * {@link Service.boot}
     */
    boot?(bud: Bud): Promise<void>;
    /**
     * {@link BudCache.configuration}
     * @readonly
     */
    get configuration(): Configuration[`cache`];
    /**
     * {@link BudCache.flush}
     */
    flush(): Promise<void>;
    /**
     * Get {@link BudCache.allowCollectingMemory}
     */
    getAllowCollectingMemory(): boolean | undefined;
    /**
     * Get {@link BudCache.buildDependencies}
     */
    getBuildDependencies(): {
        [index: string]: string[];
    } | undefined;
    /**
     * Get {@link BudCache.cacheDirectory}
     */
    getCacheDirectory(): string;
    /**
     * Get {@link BudCache.type}
     */
    getType(): "filesystem" | "memory";
    /**
     * {@link BudCache.register}
     */
    register?(bud: Bud): Promise<void>;
    /**
     * Set {@link BudCache.allowCollectingMemory}
     */
    setAllowCollectingMemory(value: Callback<FileCacheOptions[`allowCollectingMemory`]>): this;
    /**
     * Set {@link BudCache.buildDependencies}
     */
    setBuildDependencies(dependencies: ((records?: Record<string, Array<string>>) => Record<string, Array<string>>) | Record<string, Array<string>>): this;
    /**
     * Set {@link BudCache.cacheDirectory}
     */
    setCacheDirectory(directory: Callback<FileCacheOptions[`cacheDirectory`]>): this;
    /**
     * Set {@link BudCache.type}
     */
    setType(type: `filesystem` | `memory`): this;
}
