import { jsx as _jsx, jsxs as _jsxs } from "@roots/bud-support/jsx-runtime";
/* eslint-disable n/no-process-env */
import { BudError } from '@roots/bud-support/errors';
import figures from '@roots/bud-support/figures';
import { Box, Static, Text } from '@roots/bud-support/ink';
const cleanErrorObject = (error) => {
    if (!error) {
        error = new BudError(`Unknown error`);
    }
    if (typeof error === `string`) {
        error = new BudError(error);
    }
    return error instanceof BudError ? error : BudError.normalize(error);
};
export const Error = ({ error: input }) => {
    return (_jsx(Static, { items: [0], children: (_, key) => _jsx(Display, { error: input }, key) }));
};
export const Display = ({ error: input }) => {
    const error = cleanErrorObject(input);
    return (_jsxs(Box, { flexDirection: "column", gap: 1, paddingTop: 1, children: [error.name && (_jsx(Box, { flexDirection: "row", gap: 1, children: _jsx(Text, { backgroundColor: "red", color: "white", children: error.name }) })), error.message && (_jsx(Box, { flexDirection: "column", gap: 1, children: _jsxs(Box, { flexDirection: "row", gap: 1, children: [_jsx(Text, { color: "red", children: figures.cross }), _jsx(Text, { children: error.message })] }) })), error.details && !error.details.startsWith(`resolve`) && (_jsxs(Box, { flexDirection: "column", gap: 1, children: [_jsxs(Box, { flexDirection: "row", gap: 1, children: [_jsx(Text, { color: "blue", children: figures.ellipsis }), _jsx(Text, { color: "blue", children: "Details" })] }), _jsx(Text, { children: error.details })] })), error.origin && (_jsx(Box, { flexDirection: "column", gap: 1, children: _jsx(Box, { borderBottom: false, borderColor: "red", borderLeft: true, borderRight: false, borderStyle: "single", borderTop: false, flexDirection: "column", gap: 1, paddingLeft: 1, children: error.origin.message && _jsx(Text, { children: error.origin.message }) }) })), error.instance && (_jsx(Box, { flexDirection: "column", gap: 1, children: _jsxs(Box, { flexDirection: "row", gap: 1, children: [_jsx(Text, { color: "blue", children: figures.ellipsis }), _jsx(Text, { color: "blue", children: "Instance" }), _jsx(Text, { children: error.instance })] }) })), error.thrownBy && (_jsx(Box, { flexDirection: "column", gap: 1, children: _jsxs(Box, { flexDirection: "row", gap: 1, children: [_jsx(Text, { color: "blue", children: figures.ellipsis }), _jsx(Text, { color: "blue", children: "Thrown by" }), _jsx(Text, { children: error.thrownBy.toString() })] }) })), error.docs && (_jsx(Box, { flexDirection: "column", gap: 1, children: _jsxs(Box, { flexDirection: "row", gap: 1, children: [_jsx(Text, { color: "blue", children: figures.ellipsis }), _jsx(Text, { color: "blue", children: "Documentation" }), _jsx(Text, { children: error.docs.href })] }) })), error.issue?.href && (_jsx(Box, { gap: 1, children: _jsxs(Text, { children: [_jsx(Text, { color: "blue", children: figures.ellipsis }), _jsx(Text, { color: "blue", children: "Issue" }), _jsx(Text, { children: error.issue.href })] }) })), error.file?.path && (_jsxs(Box, { gap: 1, children: [_jsx(Text, { color: "blue", children: figures.info }), _jsx(Text, { color: "blue", children: "See file" }), _jsx(Text, { children: error.file.path })] })), error.stack && (_jsxs(Box, { flexDirection: "column", gap: 1, children: [_jsxs(Box, { flexDirection: "row", gap: 1, children: [_jsx(Text, { color: "blue", children: figures.info }), _jsx(Text, { color: "blue", children: "Stack trace" })] }), _jsx(Box, { borderBottom: false, borderColor: "red", borderLeft: true, borderRight: false, borderStyle: "single", borderTop: false, paddingLeft: 1, children: _jsx(Text, { dimColor: true, children: error.stack }) })] }))] }));
};
