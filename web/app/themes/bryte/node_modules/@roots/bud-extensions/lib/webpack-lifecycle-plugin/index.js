import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, label } from '@roots/bud-framework/extension/decorators';
/**
 * Webpack lifecycle plugin
 */
let BudWebpackLifecyclePlugin = class BudWebpackLifecyclePlugin extends Extension {
    /**
     * {@link Extension.apply}
     * {@link WebpackPluginInstance.apply}
     */
    apply(compiler) {
        ;
        [
            `afterCompile`,
            `assetEmitted`,
            `beforeCompile`,
            `failed`,
            `shouldEmit`,
        ]
            .filter(k => compiler.hooks[k])
            .filter(k => this[k])
            .map(k => compiler.hooks[k].tap(this.label, this[k]));
        [`additionalPass`, `afterEmit`, `emit`]
            .filter(k => compiler.hooks[k])
            .filter(k => this[k])
            .map(k => compiler.hooks[k].tapPromise(this.label, async (...args) => {
            await this[k](...args);
        }));
    }
    assetEmitted(file, info) {
        this.logger.log(`asset emitted:`, file, `=>`, this.app.relPath(info.targetPath));
    }
    /**
     * Before compile hook
     */
    beforeCompile(compilation) {
        this.logger.time(`compile`);
    }
    /**
     * After compile hook
     */
    afterCompile(compilation) {
        this.logger.log(`compilation completed:`, compilation.hash);
        this.logger.timeEnd(`compile`);
    }
    emit(compilation) {
        this.logger.time(`emit`);
    }
    failed(error) {
        this.app.compiler?.onError(error);
        return error;
    }
    shouldEmit() {
        return this.app.context.dry !== true;
    }
};
__decorate([
    bind
], BudWebpackLifecyclePlugin.prototype, "apply", null);
__decorate([
    bind
], BudWebpackLifecyclePlugin.prototype, "assetEmitted", null);
__decorate([
    bind
], BudWebpackLifecyclePlugin.prototype, "beforeCompile", null);
__decorate([
    bind
], BudWebpackLifecyclePlugin.prototype, "afterCompile", null);
__decorate([
    bind
], BudWebpackLifecyclePlugin.prototype, "emit", null);
__decorate([
    bind
], BudWebpackLifecyclePlugin.prototype, "failed", null);
__decorate([
    bind
], BudWebpackLifecyclePlugin.prototype, "shouldEmit", null);
BudWebpackLifecyclePlugin = __decorate([
    label(`@roots/bud-extensions/webpack-lifecycle-plugin`)
], BudWebpackLifecyclePlugin);
export default BudWebpackLifecyclePlugin;
