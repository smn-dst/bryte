import { relative } from 'node:path';
import omit from 'lodash-es/omit.js';
import { AsyncSeriesWaterfallHook, SyncWaterfallHook } from 'tapable';
import Webpack from 'webpack';
/**
 * {@link https://webpack.js.org/api/plugins/#custom-hooks}
 */
const hookMap = new WeakMap();
/**
 * ThemeJSONWebpackPlugin
 */
export class ThemeJsonWebpackPlugin {
    options;
    /**
     * {@see https://webpack.js.org/api/compilation-hooks/}
     */
    static getCompilationHooks(compilation) {
        let hooks = hookMap.get(compilation);
        if (hooks === undefined) {
            hooks = {
                dependencies: new SyncWaterfallHook([`dependencies`]),
                options: new AsyncSeriesWaterfallHook([`options`]),
            };
            hookMap.set(compilation, hooks);
        }
        return hooks;
    }
    /**
     * Plugin data
     */
    data = {
        __generated__: `⚠️ This file is generated. Do not edit.`,
        $schema: `https://schemas.wp.org/trunk/theme.json`,
        version: 2,
    };
    /**
     * Class constructor
     *
     * @param options - Plugin options
     */
    constructor(options) {
        this.options = options;
    }
    /**
     * {@link WebpackPluginInstance.apply}
     */
    apply(compiler) {
        if (!this.options.path)
            this.options.path = `../theme.json`;
        if (this.options.__generated__ === false) {
            delete this.options.__generated__;
            delete this.data.__generated__;
        }
        compiler.hooks.thisCompilation.tap(this.constructor.name, compilation => {
            const hooks = ThemeJsonWebpackPlugin.getCompilationHooks(compilation);
            compilation.hooks.processAssets.tapPromise(this.plugin, async () => {
                const data = await hooks.options.promise(omit(this.options, `path`));
                Object.assign(this.data, data);
                const source = new compiler.webpack.sources.RawSource(JSON.stringify(this.data, null, 2));
                compilation.emitAsset(relative(compilation.options.output.path, this.options.path), source);
            });
        });
    }
    get plugin() {
        return {
            name: this.constructor.name,
            stage: Webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL,
        };
    }
}
