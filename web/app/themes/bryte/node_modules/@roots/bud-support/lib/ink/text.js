import { jsx as _jsx } from "react/jsx-runtime";
import ansiRegex from 'ansi-regex';
import { Text } from 'ink';
import { Children, isValidElement, memo } from 'react';
// @ts-ignore
import ucr from 'unicoderegexp';
function stripAnsiControlCharacters(str) {
    return str.replace(ansiRegex(), str => (str.endsWith(`m`) ? str : ``));
}
function stripSpecialCharacters(str) {
    return str
        .split(``)
        .filter(c => [`\u000A`, `\u000D`, `\u001b`].includes(c) ||
        ucr.visible.test(c) ||
        / /.test(c))
        .join(``);
}
function normalizeString(str) {
    return stripSpecialCharacters(stripAnsiControlCharacters(str));
}
function recursivelyNormalize(children) {
    return Children.map(children, child => {
        if (typeof child === `string`) {
            return normalizeString(child);
        }
        if (isValidElement(child) &&
            (child.type === InkAnsiText || child.type === Text)) {
            return {
                ...child,
                props: {
                    ...child.props,
                    children: recursivelyNormalize(child.props.children),
                },
                type: Text,
            };
        }
        if (Array.isArray(child)) {
            return recursivelyNormalize(child);
        }
        return child;
    });
}
const InkAnsiText = memo(({ children, ...otherProps }) => {
    return _jsx(Text, { ...otherProps, children: recursivelyNormalize(children) });
});
InkAnsiText.displayName = `InkAnsiText`;
export default InkAnsiText;
