import type { LoaderOptions, Registry } from '@roots/bud-babel';
import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
/**
 * Babel configuration
 */
declare class BabelExtension extends Extension {
    /**
     * Babel configuration options (sourced from babelrc)
     */
    configFileOptions: Record<string, any> | undefined;
    /**
     * Babel env
     */
    env: LoaderOptions[`env`];
    /**
     * Plugins registry
     */
    plugins: Registry;
    /**
     * Presets registry
     */
    presets: Registry;
    /**
     * Cache directory
     */
    get cacheDirectory(): LoaderOptions[`cacheDirectory`];
    /**
     * Config file accessor
     */
    get configFile(): Record<string, any> | undefined;
    /**
     * Get babel env value
     */
    getEnv(): LoaderOptions[`env`];
    /**
     * Loader options
     *
     * @readonly
     */
    get loaderOptions(): LoaderOptions;
    /**
     * {@link Extension.register}
     */
    register({ build, hooks }: Bud): Promise<void>;
    /**
     * Root directory
     */
    get root(): string;
    /**
     * Set babel env value
     *
     * @param env - Babel env
     * @returns this
     */
    setEnv(env: LoaderOptions[`env`]): this;
    /**
     * Set a babel plugin
     */
    setPlugin(name: [any, any?] | string, plugin?: [any, any?] | string): this;
    /**
     * Set options on a babel plugin
     */
    setPluginOptions(plugin: string, options: any): this;
    /**
     * Set babel plugins
     */
    setPlugins(plugins: {
        [key: string]: [any, any?] | string;
    }): this;
    /**
     * Set a babel preset
     */
    setPreset(name: [any, any?] | string, preset?: [any, any?] | string): this;
    /**
     * Set options on a babel preset
     */
    setPresetOptions(preset: string, options: any): this;
    /**
     * Set babel presets
     */
    setPresets(presets: {
        [key: string]: [string, any] | string;
    }): this;
    /**
     * Remove a babel plugin
     */
    unsetPlugin(plugin: string): this;
    /**
     * Remove a babel preset
     */
    unsetPreset(preset: string): this;
}
export { BabelExtension as default };
