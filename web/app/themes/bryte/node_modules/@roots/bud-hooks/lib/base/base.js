import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators/bind';
import { BudError } from '@roots/bud-support/errors';
import isUndefined from '@roots/bud-support/isUndefined';
import logger from '@roots/bud-support/logger';
/**
 * Synchronous hooks registry
 *
 * @remarks
 * Supports sync values
 */
export class Hooks {
    _app;
    /**
     * Hooks store
     */
    store;
    /**
     * Class constructor
     */
    constructor(_app) {
        this._app = _app;
        this.store = {};
    }
    /**
     * Get app
     */
    get app() {
        return this._app();
    }
    /**
     * Get logger
     */
    get logger() {
        return logger.scope(`hooks`);
    }
    catch(e, id, iteration) {
        if (!id) {
            throw BudError.normalize(e, {
                details: `An error occured while running a hook`,
                thrownBy: import.meta.url,
            });
        }
        throw BudError.normalize(e, {
            details: `An error occured while running hook id: ${id}`,
            thrownBy: import.meta.url,
        });
    }
    /**
     * Check if a hook has been set somewhere
     */
    has(path) {
        return !isUndefined(this.store?.[path]);
    }
}
__decorate([
    bind
], Hooks.prototype, "catch", null);
__decorate([
    bind
], Hooks.prototype, "has", null);
