import { __decorate } from "tslib";
import { DynamicOption, Extension, } from '@roots/bud-framework/extension';
import { bind, options } from '@roots/bud-framework/extension/decorators';
import get from '@roots/bud-support/get';
import isFunction from '@roots/bud-support/isFunction';
import pluginUtils from 'tailwindcss/lib/util/pluginUtils.js';
import resolveConfig from 'tailwindcss/resolveConfig.js';
/**
 * TailwindCSS configuration
 */
let BudTailwindOptionsApi = class BudTailwindOptionsApi extends Extension {
    extendTheme(...params) {
        if (params.length === 1) {
            const [value] = params;
            this.setConfig((config = { content: [] }) => ({
                ...config,
                theme: {
                    ...(config?.theme ?? {}),
                    extend: { ...(config?.theme?.extend ?? {}), ...value },
                },
            }));
            this.resolveConfig();
            return this;
        }
        const [key, value] = params;
        this.setConfig(config => ({
            ...config,
            theme: {
                ...(config?.theme ?? {}),
                extend: { ...(config?.theme?.extend ?? {}), [key]: value },
            },
        }));
        this.resolveConfig();
        return this;
    }
    extend = this.extendTheme;
    /**
     * Generate import mapping
     *
     * @example
     * Generate colors import:
     *
     * ```js
     * bud.tailwind.generateImports([`colors`])
     * ```
     *
     * @example
     * Generate all imports:
     *
     * ```js
     * bud.tailwind.generateImports(true)
     * ```
     */
    generateImports(imports = true) {
        this.resolveConfig();
        const makeStaticModule = (key) => {
            const value = get(this.resolvedConfig.theme, key);
            this.logger.log(`@tailwind/${key}: generating module`);
            return `export default ${JSON.stringify(value)};`;
        };
        this.app.hooks.action(`config.after`, async (bud) => {
            const importableKeys = Array.isArray(imports)
                ? imports
                : Object.keys(this.resolvedConfig.theme);
            const modules = importableKeys.reduce((acc, key) => ({
                ...acc,
                [bud.path(`@src`, `__bud`, `@tailwind`, `${key}.mjs`)]: makeStaticModule(key),
            }), {});
            bud.hooks.action(`build.before`, async (bud) => {
                const WebpackVirtualModules = await import(`webpack-virtual-modules`);
                await bud.extensions.add({
                    label: `@roots/bud-tailwindcss/virtual-module`,
                    make: async () => new WebpackVirtualModules.default(modules),
                });
                bud.hooks.async(`build.resolve.alias`, async (aliases = {}) => ({
                    ...aliases,
                    [`@tailwind`]: `${bud.path(`@src`, `__bud`, `@tailwind`)}`,
                }));
            });
        });
        return this;
    }
    getContent() {
        return this.config?.content;
    }
    getPlugins() {
        return this.config?.plugins;
    }
    getTheme(key) {
        return key ? this.config.theme?.[key] : this.config.theme;
    }
    resolveConfig() {
        this.setResolvedConfig({ ...resolveConfig({ ...this.config }) });
        return this.resolvedConfig;
    }
    /**
     * Resolve a tailwind config value
     */
    resolveThemeValue(key, extendedOnly) {
        if (extendedOnly) {
            if (!this.config?.theme?.extend)
                throw new Error(`@roots/bud-tailwindcss: using \`extendOnly\` with ${key} but \`theme.extend\` is not defined in your tailwind config.`);
            const value = this.config.theme.extend[key];
            if (!value) {
                throw new Error(`@roots/bud-tailwindcss: using \`extendOnly\` with ${key} but \`theme.extend.${key}\` is not defined in your tailwind config.`);
            }
            return isFunction(value) ? value(pluginUtils) : value;
        }
        const value = this.resolvedConfig?.theme?.[key];
        if (!value) {
            throw new Error(`@roots/bud-tailwindcss: ${key} is not a valid tailwind theme key.`);
        }
        return value;
    }
    setContent(content) {
        this.setConfig((config = { content: [] }) => ({ ...config, content }));
        return this;
    }
    setPlugins(plugins) {
        this.setConfig((config = { content: [] }) => ({
            ...config,
            plugins,
        }));
        this.resolveConfig();
        return this;
    }
    setTheme(...params) {
        if (params.length === 1) {
            const [value] = params;
            this.setConfig((config = { content: [] }) => ({
                ...config,
                theme: { ...(config.theme ?? {}), ...value },
            }));
            this.resolveConfig();
            return this;
        }
        const [key, value] = params;
        this.setConfig((config = { content: [] }) => ({
            ...config,
            theme: { ...(config.theme ?? {}), [key]: value },
        }));
        this.resolveConfig();
        return this;
    }
    /**
     * Source tailwind config module and path
     */
    async sourceConfig() {
        try {
            const config = this.app.context.files[`tailwind.config`];
            if (!config)
                return;
            config.path && this.setConfigPath(config.path);
            config.module && this.setConfig({ ...(await config.module()) });
            this.resolveConfig();
        }
        catch (error) {
            this.logger.error(error);
        }
    }
};
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "extendTheme", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "generateImports", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "getContent", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "getPlugins", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "getTheme", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "resolveConfig", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "resolveThemeValue", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "setContent", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "setPlugins", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "setTheme", null);
__decorate([
    bind
], BudTailwindOptionsApi.prototype, "sourceConfig", null);
BudTailwindOptionsApi = __decorate([
    options({
        config: DynamicOption.make(bud => ({
            content: [
                bud.path(`@src`, `**`, `*`),
                `!${bud.path(`@src`, `**`, `*.{css,scss}`)}`,
            ],
        })),
        configPath: undefined,
        resolvedConfig: undefined,
    })
], BudTailwindOptionsApi);
export { BudTailwindOptionsApi, };
