import type { Config, ThemeConfig } from 'tailwindcss/types/config.js';
import { Extension, type StrictPublicExtensionApi } from '@roots/bud-framework/extension';
import resolveConfig from 'tailwindcss/resolveConfig.js';
type Options = {
    config: Config;
    configPath: string;
    resolvedConfig?: ReturnType<typeof resolveConfig<Config>>;
};
type BudTailwindOptionsPublicInterface = StrictPublicExtensionApi<BudTailwindOptionsApi, Options> & {
    extend(theme: Partial<ThemeConfig>): BudTailwindOptionsPublicInterface;
    extendTheme(theme: Partial<ThemeConfig>): BudTailwindOptionsPublicInterface;
    extendTheme<K extends keyof ThemeConfig & string>(key: `${K}`, theme: ThemeConfig[K]): BudTailwindOptionsPublicInterface;
    generateImports(imports: Array<`${keyof ThemeConfig & string}`> | boolean): BudTailwindOptionsPublicInterface;
    getContent(): Config[`content`];
    getPlugins(): Config[`plugins`];
    getTheme(): ThemeConfig;
    getTheme<K extends keyof ThemeConfig & string>(key?: `${K}`): K extends ThemeConfig ? ThemeConfig[K] : ThemeConfig;
    setContent(content: Config[`content`]): BudTailwindOptionsPublicInterface;
    setPlugins(plugins: Config[`plugins`]): BudTailwindOptionsPublicInterface;
    setTheme(theme: ThemeConfig): BudTailwindOptionsPublicInterface;
    setTheme<K extends keyof ThemeConfig & string>(key: K, theme: ThemeConfig[K]): BudTailwindOptionsPublicInterface;
};
/**
 * TailwindCSS configuration
 */
declare class BudTailwindOptionsApi extends Extension<Options> implements BudTailwindOptionsPublicInterface {
    /**
     * Tailwind config
     */
    config: BudTailwindOptionsPublicInterface[`config`];
    /**
     * Tailwind config path
     */
    configPath: BudTailwindOptionsPublicInterface[`configPath`];
    getConfig: BudTailwindOptionsPublicInterface[`getConfig`];
    getConfigPath: BudTailwindOptionsPublicInterface[`getConfigPath`];
    getResolvedConfig: BudTailwindOptionsPublicInterface[`getResolvedConfig`];
    /**
     * Tailwind config (resolved)
     */
    resolvedConfig: BudTailwindOptionsPublicInterface[`resolvedConfig`];
    setConfig: BudTailwindOptionsPublicInterface[`setConfig`];
    setConfigPath: BudTailwindOptionsPublicInterface[`setConfigPath`];
    setResolvedConfig: BudTailwindOptionsPublicInterface[`setResolvedConfig`];
    extendTheme<K extends `${keyof ThemeConfig & string}` | undefined, V extends Partial<ThemeConfig>, VK extends Partial<ThemeConfig>[K]>(...params: [K, VK] | [V]): this;
    extend: <K extends "content" | "screens" | "supports" | "data" | "colors" | "spacing" | "container" | "inset" | "zIndex" | "order" | "gridColumn" | "gridColumnStart" | "gridColumnEnd" | "gridRow" | "gridRowStart" | "gridRowEnd" | "margin" | "aspectRatio" | "height" | "maxHeight" | "minHeight" | "width" | "maxWidth" | "minWidth" | "flex" | "flexShrink" | "flexGrow" | "flexBasis" | "borderSpacing" | "transformOrigin" | "translate" | "rotate" | "skew" | "scale" | "animation" | "keyframes" | "cursor" | "scrollMargin" | "scrollPadding" | "listStyleType" | "columns" | "gridAutoColumns" | "gridAutoRows" | "gridTemplateColumns" | "gridTemplateRows" | "gap" | "space" | "divideWidth" | "divideColor" | "divideOpacity" | "borderRadius" | "borderWidth" | "borderColor" | "borderOpacity" | "backgroundColor" | "backgroundOpacity" | "backgroundImage" | "gradientColorStops" | "backgroundSize" | "backgroundPosition" | "fill" | "stroke" | "strokeWidth" | "objectPosition" | "padding" | "textIndent" | "fontFamily" | "fontSize" | "fontWeight" | "lineHeight" | "letterSpacing" | "textColor" | "textOpacity" | "textDecorationColor" | "textDecorationThickness" | "textUnderlineOffset" | "placeholderColor" | "placeholderOpacity" | "caretColor" | "accentColor" | "opacity" | "boxShadow" | "boxShadowColor" | "outlineWidth" | "outlineOffset" | "outlineColor" | "ringWidth" | "ringColor" | "ringOpacity" | "ringOffsetWidth" | "ringOffsetColor" | "blur" | "brightness" | "contrast" | "dropShadow" | "grayscale" | "hueRotate" | "invert" | "saturate" | "sepia" | "backdropBlur" | "backdropBrightness" | "backdropContrast" | "backdropGrayscale" | "backdropHueRotate" | "backdropInvert" | "backdropOpacity" | "backdropSaturate" | "backdropSepia" | "transitionProperty" | "transitionTimingFunction" | "transitionDelay" | "transitionDuration" | "willChange", V extends Partial<ThemeConfig>, VK extends Partial<ThemeConfig>[K]>(...params: [K, VK] | [V]) => this;
    /**
     * Generate import mapping
     *
     * @example
     * Generate colors import:
     *
     * ```js
     * bud.tailwind.generateImports([`colors`])
     * ```
     *
     * @example
     * Generate all imports:
     *
     * ```js
     * bud.tailwind.generateImports(true)
     * ```
     */
    generateImports(imports?: Array<`${keyof ThemeConfig & string}`> | boolean): this;
    getContent(): import("tailwindcss/types/config.js").ContentConfig;
    getPlugins(): (import("tailwindcss/types/config.js").PluginCreator | {
        handler: import("tailwindcss/types/config.js").PluginCreator;
        config?: Partial<Config>;
    } | {
        (options: any): {
            handler: import("tailwindcss/types/config.js").PluginCreator;
            config?: Partial<Config>;
        };
        __isOptionsFunction: true;
    })[];
    getTheme<K extends keyof ThemeConfig & string>(key?: K): Partial<import("tailwindcss/types/config.js").CustomThemeConfig & {
        extend: Partial<import("tailwindcss/types/config.js").CustomThemeConfig>;
    }> | Partial<import("tailwindcss/types/config.js").CustomThemeConfig & {
        extend: Partial<import("tailwindcss/types/config.js").CustomThemeConfig>;
    }>[K];
    resolveConfig(): Omit<Config, "theme"> & {
        theme: {
            [x: string]: any;
            [x: number]: any;
        };
    };
    /**
     * Resolve a tailwind config value
     */
    resolveThemeValue<K extends `${keyof ThemeConfig & string}`>(key: K, extendedOnly?: boolean): Config[K];
    setContent(content: Config[`content`]): this;
    setPlugins(plugins: Config[`plugins`]): this;
    setTheme<K extends `${keyof ThemeConfig & string}` | undefined, V extends ((theme: Partial<ThemeConfig>) => Partial<ThemeConfig>) | Partial<ThemeConfig>, VK extends ((theme: Partial<ThemeConfig>[K]) => Partial<ThemeConfig>[K]) | Partial<ThemeConfig>[K]>(...params: [K, VK] | [V]): this;
    /**
     * Source tailwind config module and path
     */
    sourceConfig(): Promise<void>;
}
export { BudTailwindOptionsApi, type BudTailwindOptionsPublicInterface, type Options, };
